#NAMESPACE=playlister

dependencies::depends "queue/client"
dependencies::depends "logs/logger"
dependencies::depends "timeslots/timeslots"

function peek() {
    for queue in `radio_timeslots::queues`
    do
    item=`this::_peek_from_queue "$queue"`
    this::_is_invalid "$item"
    logger::log "info" "peek item = $item (queue $queue) [invalid = $?]"
    if [[ $item != "" ]] && `this::_is_invalid "$item"`; then
        echo "$item"
        return
    else
        if [[ $ALLOW_SKIPPING_DURING_PEEK -eq 1 && $item != "" ]]; then
            if [[ $queue == $REQUEST_QUEUE || $queue == $IDLE_QUEUE ]]; then
                logger::log "error" "skipping `this::_get_from_queue $queue` in $queue"
            fi
        fi
    fi
    done
    logger::log "error" "peek found no suitable item!"
}

function add_to_playlist(item) {
    if [[ -z $PLAYED_TIMEOUT ]]; then
        PLAYED_TIMEOUT=3600
    fi
    redis-cli --raw -h redis SETEX x-played-$item $PLAYED_TIMEOUT 1
    namespaced item_return_queue=`redis-cli --raw -h redis GET x-return-queue`
    if [[ "${namespaced item_return_queue}" != "$IDLE_QUEUE" && "${namespaced item_return_queue}" != "$REQUEST_QUEUE" && "${namespaced item_return_queue}" != "" ]]
    then
        queue_client::publish "${namespaced item_return_queue}" "$item"
        logger::log "info" "$item added to queue ${namespaced item_return_queue}" 
        return
    fi 
    queue_client::publish "$IDLE_QUEUE" "$item"
    logger::log "info" "$item added to idle queue"
}

function get_item() {
    for queue in `radio_timeslots::queues`
    do
    item=`this::_peek_from_queue "$queue"`
    logger::log "info" "get item = $item (queue $queue)"
    if [[ $item != "" ]] && `this::_is_invalid "$item"`; then
        item=`this::_get_from_queue "$queue"`
        if [[ `radio_timeslots::get_timeslot_queue` != "" && $queue == "$REQUEST_QUEUE" ]]; then
            namespaced item_return_queue=`radio_timeslots::get_timeslot_queue`
        else
            namespaced item_return_queue=$queue
        fi
        redis-cli --raw -h redis SET x-return-queue ${namespaced item_return_queue} > /dev/null
        echo "$item"
        return
    fi
    done
    logger::log "error" "get found no suitable item!"
    echo "$item"
}

#FIXME abstract away
function _is_invalid(item) {
    if [[ `redis-cli --raw -h redis GET x-played-$item` == "" ]]; then return 0; else return 1; fi;
}

function _get_from_queue(queue) {
    queue_client::get "$queue"
}

function _peek_from_queue(queue) {
    queue_client::peek "$queue"
}
